#pragma once
#include <stdio.h>
#include <vector>


/****************************************************************************************************************/

/******************** 함수를 두 종류로 구분 ********************/

// 함수를 두 종류로 구분.
// 
// 1. 계산과 알고리즘을 실행하고 실제 작업을 수행하는 함수.
// 2. 첫 번째 함수들을 조합해서 흐름을 만드는 함수.
// 
// 여러 일을 하는 큰 함수를 이러한 두 종류의 함수로 분할할 수 있다.
// 큰일을 하는 복잡한 함수는 작은 일을 하는 단순한 함수로 분할하자.

class GameTime {

};

class Actor {
public:
	// ...생략	
	// 이동
	virtual void move(const GameTime& deltaTime) = 0;
};

std::vector<Actor*> actors;

void collide() {

}


///////////////////////////////////////////////////////////

/* 큰 일을 하는 복잡한 함수 */

void BeforeUpdate(const GameTime& deltaTime) {
	// 이동 처리(실제 작업 부분)
	for (std::vector<Actor*>::iterator i = actors.begin(); i != actors.end(); i++) {
		(*i)->move(deltaTime);
	}

	// 충돌 판정(다른 함수를 사용하는 부분)
	collide();
}

///////////////////////////////////////////////////////////


/* 계산과 알고리즘을 실행하고 실제 작업을 수행하는 함수 */
// move 함수를 작성하여 실제 작업 부분을 분할한다.

void move(const GameTime& deltaTime) {
	for (std::vector<Actor*>::iterator i = actors.begin(); i != actors.end(); i++) {
		(*i)->move(deltaTime);
	}
}



///////////////////////////////////////////////////////////

/* 함수들을 조합해서 흐름을 만드는 함수 */
// 변경 후 함수는 함수를 호출할 뿐, 실제 작업은 따로 수행하지 않는다.

void AfterUpdate(const GameTime& deltaTime) {
	// 이동 처리
	move(deltaTime);
	// 충돌 판정
	collide();
}

///////////////////////////////////////////////////////////

/****************************************************************************************************************/